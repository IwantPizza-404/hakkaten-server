from fastapi import Response, Request, HTTPException, status
from sqlalchemy.orm import Session
from datetime import datetime, timezone
from app.repositories.user import UserRepository
from app.core.jwt import create_access_token, create_refresh_token
from app.core.hashing import verify_password
from app.database.models import UserSession

class AuthService:
    @staticmethod
    def login(request: Request, response: Response, db: Session, username_or_email: str, password: str):
        """–õ–æ–≥–∏–Ω + —Å–æ–∑–¥–∞–Ω–∏–µ refresh-—Ç–æ–∫–µ–Ω–∞"""
        user = UserRepository.get_by_email_or_username(db, username_or_email)

        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username_or_email}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid credentials")

        print(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
        print(f"‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ –ë–î: {user.hashed_password}")

        if not verify_password(password, user.hashed_password):
            print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid credentials")

        print("‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤—ã–¥–∞–µ–º —Ç–æ–∫–µ–Ω!")


        access_token = create_access_token(str(user.id))
        refresh_token = create_refresh_token(str(user.id))

        # üõ° –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ IP
        device_id = request.headers.get("Device-Id", "unknown_device")
        ip_adress = request.client.host
        user_agent = request.headers.get("User-Agent")
        UserRepository.save_refresh_token(db, user.id, refresh_token, device_id, ip_adress, user_agent)

        response.set_cookie(
            key="refresh_token",
            value=refresh_token,
            httponly=True,
            secure=True,
            samesite="Lax",
            path="/"
        )

        return {"access_token": access_token, "token_type": "bearer"}

    @staticmethod
    def refresh(response: Response, db: Session, request: Request):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access_token"""
        refresh_token = request.cookies.get("refresh_token")
        if not refresh_token or not UserRepository.is_refresh_token_valid(db, refresh_token):
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid refresh token")

        session = db.query(UserSession).filter(UserSession.refresh_token == refresh_token).first()
        if session.is_revoked or session.expires_at < datetime.now(timezone.utc):
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Refresh token expired")

        new_access_token = create_access_token(session.user_id)
        new_refresh_token = create_refresh_token(session.user_id)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π refresh_token –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        UserRepository.revoke_refresh_token(db, refresh_token)
        UserRepository.save_refresh_token(db, session.user_id, new_refresh_token, request.client.host, request.headers.get("User-Agent"))

        response.set_cookie(
            key="refresh_token",
            value=new_refresh_token,
            httponly=True,
            secure=True,
            samesite="Lax",
            path="/"
        )

        return {"access_token": new_access_token, "token_type": "bearer"}

    @staticmethod
    def logout(response: Response, db: Session, request: Request):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (—É–¥–∞–ª–µ–Ω–∏–µ refresh-—Ç–æ–∫–µ–Ω–∞)"""
        refresh_token = request.cookies.get("refresh_token")
        if refresh_token:
            UserRepository.revoke_refresh_token(db, refresh_token)

        response.delete_cookie("refresh_token")
        return {"message": "Logout successful"}
